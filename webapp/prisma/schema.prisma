// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(50)
  level       Int      @db.Int
  description String?  @db.VarChar(200)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  User        User[]

  @@map("roles")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   @db.VarChar(100)
  isEnabled     Boolean   @default(true) @map("is_enabled") @db.TinyInt
  emailVerified DateTime? @map("email_verified")
  image         String?
  roleId        String    @map("role_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  role          Role      @relation(fields: [roleId], references: [id], onDelete: Restrict)
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime


  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id            String     @id @default(cuid())
  name          String     @db.VarChar(50)
  value         String     @unique @db.VarChar(50)
  description   String?    @db.VarChar(255)
  parentId      String?    @map("parent_id")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  parent        Category?  @relation(name: "parent_category", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories Category[] @relation("parent_category")
  resources     Resource[]
  requests      Request[]

  @@index([name])
  @@map("categories")
}

enum ResourceType {
  WEBPAGE
  VIDEO
  PICTURE
  SLIDE
  TEXT
  OTHER
}

model Resource {
  id          String       @id @default(cuid())
  name        String       @unique @db.VarChar(255)
  type        ResourceType @default(WEBPAGE)
  link        String       @db.VarChar(255)
  description String?      @db.Text
  picture     String?      @db.VarChar(255)
  categoryId  String       @map("category_id")
  extra       Json?        @db.Json
  clickCount  Int          @default(0) @map("click_count") @db.Int
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@map("resources")
}

enum RequestStatus {
  PENDING
  DONE
  ARCHIVED
}

model Request {
  id          String        @id @default(cuid())
  userName    String        @db.VarChar(50) @map("user_name")
  userEmail   String        @db.VarChar(50) @map("user_email")
  status      RequestStatus @default(PENDING)
  description String?       @db.Text
  categoryId  String?       @map("category_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  replies     Reply[]

  @@map("requests")
}

model Reply {
  id        String   @id @default(cuid())
  message   String   @db.Text
  requestId String   @map("request_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Restrict)

  @@map("replies")
}
